{
  "name": "chart",
  "dependencies": [
    "recharts",
    "lucide-react"
  ],
  "registryDependencies": [
    "card"
  ],
  "type": "components:ui",
  "files": [
    {
      "type": "tsx",
      "name": "index",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as RechartsPrimitive from 'recharts';\nimport { cn } from '@/lib/utils';\nimport styles from './chart.module.css';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | {\n        color?: string;\n        theme?: never;\n      }\n    | {\n        color?: never;\n        theme: Record<keyof typeof THEMES, string>;\n      }\n  );\n};\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    config: ChartConfig;\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >['children'];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(styles.chartId, className)}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = 'Chart';\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color,\n  );\n  if (!colorConfig.length) {\n    return null;\n  }\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<'div'> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: 'line' | 'dot' | 'dashed';\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = 'dot',\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n\n      const key = `${labelKey || item.dataKey || item.name || 'value'}`;\n\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n      const value =\n        !labelKey && typeof label === 'string'\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n      if (labelFormatter) {\n        return (\n          <div className={cn(styles.value, labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        );\n      }\n      if (!value) {\n        return null;\n      }\n      return <div className={cn(styles.value, labelClassName)}>{value}</div>;\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ]);\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot';\n    return (\n      <div ref={ref} className={cn(styles.nestLabel, className)}>\n        {!nestLabel ? tooltipLabel : null}\n        <div className={styles.nestLabelDiv}>\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || 'value'}`;\n\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n            const indicatorColor = color || item.payload.fill || item.color;\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  styles.indicatorColor,\n                  indicator === 'dot' && styles.indicatorColor,\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(styles.indicatorColorDiv, {\n                            'h-2.5 w-2.5': indicator === 'dot',\n                            'w-1': indicator === 'line',\n                            'w-0 border-[1.5px] border-dashed bg-transparent':\n                              indicator === 'dashed',\n                            'my-0.5': nestLabel && indicator === 'dashed',\n                          })}\n                          style={\n                            {\n                              '--color-bg': indicatorColor,\n                              '--color-border': indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        styles.indicatorColorDiv,\n                        nestLabel\n                          ? styles.indicatorColorNestLabel\n                          : styles.indicatorColor,\n                      )}\n                    >\n                      <div className={styles.nestLabelDiv}>\n                        {nestLabel ? tooltipLabel : null}\n                        <span className={styles.indicatorColorSpan}>\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className={styles.indicatorColorSpan}>\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = 'ChartTooltip';\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> &\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },\n    ref,\n  ) => {\n    const { config } = useChart();\n    if (!payload?.length) {\n      return null;\n    }\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          styles.chartLegendContent,\n          verticalAlign === 'top'\n            ? styles.chartLegendContent\n            : styles.chartLegendContent,\n          className,\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || 'value'}`;\n\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n          return (\n            <div key={item.value} className={cn(styles.itemConfig)}>\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className={styles.itemConfigDiv}\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n);\nChartLegendContent.displayName = 'ChartLegend';\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    'payload' in payload &&\n    typeof payload.payload === 'object' &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n  let configLabelKey: string = key;\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === 'string'\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n"
    },
    {
      "type": "css",
      "name": "chart.module",
      "content": ".chartId {\n  display: flex;\n  aspect-ratio: 16 / 9;\n  justify-content: center;\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.chartId .recharts-cartesian-axis-tick text {\n  fill: hsl(var(--muted-foreground));\n}\n.chartId .recharts-cartesian-grid line[stroke=\"#ccc\"] {\n  stroke: hsl(var(--border) / 0.5);\n}\n.chartId .recharts-curve.recharts-tooltip-cursor {\n  stroke: hsl(var(--border));\n}\n.chartId .recharts-dot[stroke=\"#fff\"] {\n  stroke: transparent;\n}\n.chartId .recharts-layer {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.chartId .recharts-polar-grid [stroke=\"#ccc\"] {\n  stroke: hsl(var(--border));\n}\n.chartId .recharts-radial-bar-background-sector {\n  fill: hsl(var(--muted));\n}\n.chartId .recharts-rectangle.recharts-tooltip-cursor {\n  fill: hsl(var(--muted));\n}\n.chartId .recharts-reference-line [stroke=\"#ccc\"] {\n  stroke: hsl(var(--border));\n}\n.chartId .recharts-sector[stroke=\"#fff\"] {\n  stroke: transparent;\n}\n.chartId .recharts-sector {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.chartId .recharts-surface {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.value {\n  font-weight: 500;\n}\n.nestLabel {\n  display: grid;\n  min-width: 8rem;\n  align-items: flex-start;\n  gap: 0.375rem;\n  border-radius: var(--radius);\n  border-width: 1px;\n  border-color: hsl(var(--border) / 0.5);\n  background-color: hsl(var(--background));\n  padding-left: 0.625rem;\n  padding-right: 0.625rem;\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n  --tw-shadow:\n    0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored:\n    0 20px 25px -5px var(--tw-shadow-color),\n    0 8px 10px -6px var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n}\n.nestLabelDiv {\n  display: grid;\n  gap: 0.375rem;\n}\n.indicatorColor {\n  display: flex;\n  width: 100%;\n  flex-wrap: wrap;\n  align-items: stretch;\n  gap: 0.5rem;\n  align-items: center;\n}\n.indicatorColor > svg {\n  height: 0.625rem;\n  width: 0.625rem;\n  color: hsl(var(--muted-foreground));\n}\n.indicatorColorDiv {\n  flex-shrink: 0;\n  border-radius: 2px;\n  border-color: var(--color-border);\n  background-color: var(--color-bg);\n  height: 0.625rem;\n  width: 0.25rem;\n  width: 0px;\n  border-width: 1.5px;\n  border-style: dashed;\n  background-color: transparent;\n  margin-top: 0.125rem;\n  margin-bottom: 0.125rem;\n  display: flex;\n  flex: 1 1 0%;\n  justify-content: space-between;\n  line-height: 1;\n}\n.indicatorColorNestLabel {\n  align-items: flex-end;\n}\n.indicatorColorSpan {\n  color: hsl(var(--muted-foreground));\n  font-family:\n    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\",\n    \"Courier New\", monospace;\n  font-weight: 500;\n  --tw-numeric-spacing: tabular-nums;\n  font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero)\n    var(--tw-numeric-figure) var(--tw-numeric-spacing)\n    var(--tw-numeric-fraction);\n  color: hsl(var(--foreground));\n}\n.chartLegendContent {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n  padding-bottom: 0.75rem;\n  padding-top: 0.75rem;\n}\n.itemConfig {\n  display: flex;\n  align-items: center;\n  gap: 0.375rem;\n}\n.itemConfig > svg {\n  height: 0.75rem;\n  width: 0.75rem;\n  color: hsl(var(--muted-foreground));\n}\n.itemConfigDiv {\n  height: 0.5rem;\n  width: 0.5rem;\n  flex-shrink: 0;\n  border-radius: 2px;\n}\n"
    }
  ]
}