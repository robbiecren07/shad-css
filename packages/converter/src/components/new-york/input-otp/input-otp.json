{
  "name": "input-otp",
  "dependencies": [
    "input-otp"
  ],
  "registryDependencies": [],
  "type": "components:ui",
  "files": [
    {
      "type": "tsx",
      "name": "index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { DashIcon } from '@radix-ui/react-icons';\nimport { OTPInput, OTPInputContext } from 'input-otp';\nimport { cn } from '@/lib/utils';\nimport styles from './input-otp.module.css';\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      'flex items-center gap-2 has-[:disabled]:opacity-50',\n      containerClassName,\n    )}\n    className={cn(styles.inputOTP, className)}\n    {...props}\n  />\n));\nInputOTP.displayName = 'InputOTP';\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(styles.inputOTPGroup, className)} {...props} />\n));\nInputOTPGroup.displayName = 'InputOTPGroup';\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'> & {\n    index: number;\n  }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext);\n\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        styles.inputOTPContext,\n        isActive && styles.inputOTPContextIsActive,\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className={styles.inputOTPContextDiv}>\n          <div className={styles.inputOTPContextDiv} />\n        </div>\n      )}\n    </div>\n  );\n});\nInputOTPSlot.displayName = 'InputOTPSlot';\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'>\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <DashIcon />\n  </div>\n));\nInputOTPSeparator.displayName = 'InputOTPSeparator';\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };\n"
    },
    {
      "type": "css",
      "name": "input-otp.module.css",
      "content": ".inputOTP:disabled {\n  cursor: not-allowed;\n}\n.inputOTPGroup {\n  display: flex;\n  align-items: center;\n}\n.inputOTPContext {\n  position: relative;\n  display: flex;\n  height: 2.25rem;\n  width: 2.25rem;\n  align-items: center;\n  justify-content: center;\n  border-top-width: 1px;\n  border-bottom-width: 1px;\n  border-right-width: 1px;\n  border-color: hsl(var(--input));\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000),\n    var(--tw-shadow);\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.inputOTPContext:first-child {\n  border-top-left-radius: calc(var(--radius) - 2px);\n  border-bottom-left-radius: calc(var(--radius) - 2px);\n  border-left-width: 1px;\n}\n.inputOTPContext:last-child {\n  border-top-right-radius: calc(var(--radius) - 2px);\n  border-bottom-right-radius: calc(var(--radius) - 2px);\n}\n.inputOTPContextIsActive {\n  z-index: 10;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0\n    var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0\n    calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow), var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n  --tw-ring-color: hsl(var(--ring));\n}\n.inputOTPContextDiv {\n  pointer-events: none;\n  position: absolute;\n  inset: 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 1rem;\n  width: 1px;\n}\n.inputOTPContextDiv {\n  animation: caret-blink 1.25s ease-out infinite;\n  background-color: hsl(var(--foreground));\n  transition-duration: 1000ms;\n  animation-duration: 1000ms;\n}\n@keyframes caret-blink {\n  0%,\n  70%,\n  100% {\n    opacity: 1;\n  }\n  20%,\n  50% {\n    opacity: 0;\n  }\n}\n"
    }
  ]
}