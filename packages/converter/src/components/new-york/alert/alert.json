{
  "name": "alert",
  "dependencies": [],
  "registryDependencies": [],
  "type": "components:ui",
  "files": [
    {
      "type": "tsx",
      "name": "index.tsx",
      "content": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\nimport styles from './alert.module.css';\n\nconst alertVariants = cva(styles.alertBase, {\n  variants: {\n    variant: {\n      default: styles.alertDefault,\n      destructive: styles.alertDestructive,\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n));\nAlert.displayName = 'Alert';\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5 ref={ref} className={cn(styles.alertTitle, className)} {...props} />\n));\nAlertTitle.displayName = 'AlertTitle';\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(styles.alertDescription, className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = 'AlertDescription';\n\nexport { Alert, AlertTitle, AlertDescription };\n"
    },
    {
      "type": "css",
      "name": "alert.module.css",
      "content": ".alertBase {\n  position: relative;\n  width: 100%;\n  border-radius: var(--radius);\n  border-width: 1px;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.alertBase > svg + div {\n  --tw-translate-y: -3px;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y))\n    rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y))\n    scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.alertBase > svg {\n  position: absolute;\n  left: 1rem;\n  top: 1rem;\n  color: hsl(var(--foreground));\n}\n.alertBase > svg ~ * {\n  padding-left: 1.75rem;\n}\n.alertDefault {\n  background-color: hsl(var(--background));\n  color: hsl(var(--foreground));\n}\n.alertDestructive {\n  border-color: hsl(var(--destructive) / 0.5);\n  color: hsl(var(--destructive));\n}\n@media (prefers-color-scheme: dark) {\n  .alertDestructive {\n    border-color: hsl(var(--destructive));\n  }\n}\n.alertDestructive > svg {\n  color: hsl(var(--destructive));\n}\n.alertTitle {\n  margin-bottom: 0.25rem;\n  font-weight: 500;\n  line-height: 1;\n  letter-spacing: -0.025em;\n}\n.alertDescription {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.alertDescription p {\n  line-height: 1.625;\n}\n"
    }
  ]
}