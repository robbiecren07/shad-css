{
  "name": "table",
  "dependencies": [],
  "registryDependencies": [],
  "type": "components:ui",
  "files": [
    {
      "type": "tsx",
      "name": "index.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport styles from './table.module.css';\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className={styles.table}>\n    <table ref={ref} className={cn(styles.tableTable, className)} {...props} />\n  </div>\n));\nTable.displayName = 'Table';\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(styles.tableHeader, className)} {...props} />\n));\nTableHeader.displayName = 'TableHeader';\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody ref={ref} className={cn(styles.tableBody, className)} {...props} />\n));\nTableBody.displayName = 'TableBody';\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot ref={ref} className={cn(styles.tableFooter, className)} {...props} />\n));\nTableFooter.displayName = 'TableFooter';\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr ref={ref} className={cn(styles.tableRow, className)} {...props} />\n));\nTableRow.displayName = 'TableRow';\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th ref={ref} className={cn(styles.tableHead, className)} {...props} />\n));\nTableHead.displayName = 'TableHead';\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td ref={ref} className={cn(styles.tableCell, className)} {...props} />\n));\nTableCell.displayName = 'TableCell';\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(styles.tableCaption, className)}\n    {...props}\n  />\n));\nTableCaption.displayName = 'TableCaption';\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n"
    },
    {
      "type": "css",
      "name": "table.module.css",
      "content": ".table {\n  position: relative;\n  width: 100%;\n  overflow: auto;\n}\n.tableTable {\n  width: 100%;\n  caption-side: bottom;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.tableHeader tr {\n  border-bottom-width: 1px;\n}\n.tableBody tr:last-child {\n  border-width: 0px;\n}\n.tableFooter {\n  border-top-width: 1px;\n  background-color: hsl(var(--muted) / 0.5);\n  font-weight: 500;\n}\n.tableFooter:last-child > tr {\n  border-bottom-width: 0px;\n}\n.tableRow {\n  border-bottom-width: 1px;\n  transition-property:\n    color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.tableRow:hover {\n  background-color: hsl(var(--muted) / 0.5);\n}\n.tableRow[data-state=\"selected\"] {\n  background-color: hsl(var(--muted));\n}\n.tableHead {\n  height: 2.5rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  text-align: left;\n  vertical-align: middle;\n  font-weight: 500;\n  color: hsl(var(--muted-foreground));\n}\n.tableHead:has([role=\"checkbox\"]) {\n  padding-right: 0px;\n}\n.tableHead > [role=\"checkbox\"] {\n  --tw-translate-y: 2px;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y))\n    rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y))\n    scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.tableCell {\n  padding: 0.5rem;\n  vertical-align: middle;\n}\n.tableCell:has([role=\"checkbox\"]) {\n  padding-right: 0px;\n}\n.tableCell > [role=\"checkbox\"] {\n  --tw-translate-y: 2px;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y))\n    rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y))\n    scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.tableCaption {\n  margin-top: 1rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  color: hsl(var(--muted-foreground));\n}\n"
    }
  ]
}