{
  "name": "carousel",
  "dependencies": [
    "embla-carousel-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "type": "components:ui",
  "files": [
    {
      "type": "tsx",
      "name": "index",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { ArrowLeftIcon, ArrowRightIcon } from '@radix-ui/react-icons';\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from 'embla-carousel-react';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/registry/new-york/ui/button';\nimport styles from './carousel.module.css';\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: 'horizontal' | 'vertical';\n  setApi?: (api: CarouselApi) => void;\n};\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />');\n  }\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = 'horizontal',\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === 'horizontal' ? 'x' : 'y',\n      },\n      plugins,\n    );\n\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n\n    const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return;\n      }\n      setCanScrollPrev(api.canScrollPrev());\n      setCanScrollNext(api.canScrollNext());\n    }, []);\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev();\n    }, [api]);\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext();\n    }, [api]);\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === 'ArrowLeft') {\n          event.preventDefault();\n          scrollPrev();\n        } else if (event.key === 'ArrowRight') {\n          event.preventDefault();\n          scrollNext();\n        }\n      },\n      [scrollPrev, scrollNext],\n    );\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return;\n      }\n      setApi(api);\n    }, [api, setApi]);\n    React.useEffect(() => {\n      if (!api) {\n        return;\n      }\n      onSelect(api);\n      api.on('reInit', onSelect);\n      api.on('select', onSelect);\n      return () => {\n        api?.off('select', onSelect);\n      };\n    }, [api, onSelect]);\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(styles.handleKeyDown, className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  },\n);\nCarousel.displayName = 'Carousel';\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel();\n  return (\n    <div ref={carouselRef} className={styles.carouselContent}>\n      <div\n        ref={ref}\n        className={cn(\n          styles.carouselContentDiv,\n          orientation === 'horizontal'\n            ? styles.carouselContentDiv\n            : styles.carouselContentDiv,\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n});\nCarouselContent.displayName = 'CarouselContent';\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel();\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        styles.carouselItem,\n        orientation === 'horizontal'\n          ? styles.carouselItem\n          : styles.carouselItem,\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nCarouselItem.displayName = 'CarouselItem';\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        styles.carouselPrevious,\n        orientation === 'horizontal'\n          ? styles.carouselPrevious\n          : styles.carouselPrevious,\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeftIcon className={styles.carouselPreviousArrowLeft} />\n      <span className={styles.carouselPreviousSpan}>Previous slide</span>\n    </Button>\n  );\n});\nCarouselPrevious.displayName = 'CarouselPrevious';\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel();\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        styles.carouselNext,\n        orientation === 'horizontal'\n          ? styles.carouselNext\n          : styles.carouselNext,\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRightIcon className={styles.carouselPreviousArrowLeft} />\n      <span className={styles.carouselPreviousSpan}>Next slide</span>\n    </Button>\n  );\n});\nCarouselNext.displayName = 'CarouselNext';\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n"
    },
    {
      "type": "css",
      "name": "carousel.module",
      "content": ".handleKeyDown {\n  position: relative;\n}\n.carouselContent {\n  overflow: hidden;\n}\n.carouselContentDiv {\n  display: flex;\n  margin-left: -1rem;\n  margin-top: -1rem;\n  flex-direction: column;\n}\n.carouselItem {\n  min-width: 0px;\n  flex-shrink: 0;\n  flex-grow: 0;\n  flex-basis: 100%;\n  padding-left: 1rem;\n  padding-top: 1rem;\n}\n.carouselPrevious {\n  position: absolute;\n  height: 2rem;\n  width: 2rem;\n  border-radius: 9999px;\n  left: -3rem;\n  top: 50%;\n  --tw-translate-y: -50%;\n  top: -3rem;\n  left: 50%;\n  --tw-translate-x: -50%;\n  --tw-rotate: 90deg;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y))\n    rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y))\n    scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.carouselPreviousArrowLeft {\n  height: 1rem;\n  width: 1rem;\n}\n.carouselPreviousSpan {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n.carouselNext {\n  position: absolute;\n  height: 2rem;\n  width: 2rem;\n  border-radius: 9999px;\n  right: -3rem;\n  top: 50%;\n  --tw-translate-y: -50%;\n  bottom: -3rem;\n  left: 50%;\n  --tw-translate-x: -50%;\n  --tw-rotate: 90deg;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y))\n    rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y))\n    scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n"
    }
  ]
}